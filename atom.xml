<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HSIANG</title>
  
  <subtitle>An entrepreneur</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swhsiang.github.io/"/>
  <updated>2020-04-18T07:39:45.652Z</updated>
  <id>http://swhsiang.github.io/</id>
  
  <author>
    <name>Shih, Wen-Hsiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thrift Quickstart</title>
    <link href="http://swhsiang.github.io/2016/09/21/thrift-and-golang/"/>
    <id>http://swhsiang.github.io/2016/09/21/thrift-and-golang/</id>
    <published>2016-09-21T11:16:12.000Z</published>
    <updated>2020-04-18T07:39:45.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/techstacks/apache-thrift-logo.png" alt="thrift"></p><h2 id="WHAT-IS-Thrift"><a href="#WHAT-IS-Thrift" class="headerlink" title="WHAT IS Thrift"></a>WHAT IS Thrift</h2><blockquote><p>The Apache Thrift software framework, for scalable cross-language services development…</p><footer><strong>Apache Thrift --</strong><cite><a href="https://thrift.apache.org/" target="_blank" rel="noopener">thrift.apache.org</a></cite></footer></blockquote><a id="more"></a><p>Thrift is one of most powerful RPC frameworks all over the world, supported by Facebook. It supports many languages like C++, JAVA, Python, Golang, etc. Once you create the Thrift file, it can generate basic structure of code in different languages by Thrift file.</p><h2 id="WHY-WE-CHOOSE-Thrift"><a href="#WHY-WE-CHOOSE-Thrift" class="headerlink" title="WHY WE CHOOSE Thrift"></a>WHY WE CHOOSE Thrift</h2><p>Thrift provide several useful features:</p><ul><li>Compressed data</li><li>Once a developer creates a Thrift file, the file defines the way that different languages can follow to share data across the limitation of languages which is a benefit for people who are working on several micro-service projects.</li><li><a href="http://www.doublecloud.org/2014/01/apache-thrift-hello-world-sample/" target="_blank" rel="noopener">The typical use case is for building distributed systems, mostly in house.</a></li></ul><h2 id="HOW-TO-USE-Thrift-in-Golang"><a href="#HOW-TO-USE-Thrift-in-Golang" class="headerlink" title="HOW TO USE Thrift in Golang"></a>HOW TO USE Thrift in Golang</h2><h4 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements:"></a>Requirements:</h4><ul><li>Installed Thrift</li><li>Thrift file(s)</li><li>Choose a programming language which supports Thrift.</li></ul><h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA:"></a>IDEA:</h4><p>The following is a simple example which shows the architecture. We are going to create a command line tool and a Thrift daemon server.<br>To do some simple computing on the daemon server, we will use cmd to send the task to the daemon server by RPC.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Diagram of whole project*</span><br><span class="line"></span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">                    Clients(cmd)       </span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">                        ▲</span><br><span class="line">                        |</span><br><span class="line">                        │</span><br><span class="line">                        ▼</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│                    RPC(TCP)                   │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│                  Daemon server                │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><h4 id="User-Case"><a href="#User-Case" class="headerlink" title="User Case"></a>User Case</h4><p><em>METHOD</em></p><ul><li>PING: Check the connection of the daemon server and the status of the Thrift daemon server.</li><li>ADD: Return the sum of input.</li><li>MINUS: Return the result of computing.</li><li>MULTIPLY: Return the result of computing.</li><li>DIVISION: Return the result of computing.</li></ul><p><em>PARAMETER</em></p><ul><li>INPUT: Array, optional.</li><li>OUTPUT: error, res.</li></ul><h4 id="Thrift-File"><a href="#Thrift-File" class="headerlink" title="Thrift File"></a>Thrift File</h4><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> go swhsiang.computing</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StatusOfService</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="built_in">string</span> version;</span><br><span class="line">    <span class="comment">// Listening which port</span></span><br><span class="line">    <span class="number">2</span>: <span class="keyword">required</span> <span class="built_in">string</span> network;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">InputOfComputing</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> list&lt;<span class="keyword">i32</span>&gt; num_arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OutputOfComputing</span> </span>&#123;</span><br><span class="line">    <span class="number">1</span>: <span class="keyword">required</span> <span class="built_in">string</span> error;</span><br><span class="line">    <span class="number">2</span>: <span class="keyword">optional</span> <span class="built_in">i32</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Computing</span> </span>&#123;</span><br><span class="line">    StatusOfService ping(),</span><br><span class="line">    OutputOfComputing compute(<span class="number">1</span>:InputOfComputing input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IMPLEMENTATION"><a href="#IMPLEMENTATION" class="headerlink" title="IMPLEMENTATION"></a>IMPLEMENTATION</h4><p><a href="https://github.com/swhsiang/go-thrift-cmd" target="_blank" rel="noopener">Github Repo</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://diwakergupta.github.io/thrift-missing-guide/" target="_blank" rel="noopener">Thrift: The Missing Guide</a></li></ul><p>@credit image from <a href="http://techstacks.io/tech/apache-thrift" target="_blank" rel="noopener">http://techstacks.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ServiceStack/Assets/master/img/livedemos/techstacks/apache-thrift-logo.png&quot; alt=&quot;thrift&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;WHAT-IS-Thrift&quot;&gt;&lt;a href=&quot;#WHAT-IS-Thrift&quot; class=&quot;headerlink&quot; title=&quot;WHAT IS Thrift&quot;&gt;&lt;/a&gt;WHAT IS Thrift&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;The Apache Thrift software framework, for scalable cross-language services development…&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Apache Thrift --&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://thrift.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;thrift.apache.org&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dive into rqlite 1</title>
    <link href="http://swhsiang.github.io/2016/09/13/dive-into-rqlite/"/>
    <id>http://swhsiang.github.io/2016/09/13/dive-into-rqlite/</id>
    <published>2016-09-14T04:18:12.000Z</published>
    <updated>2020-04-18T14:31:24.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/rqlite/rqlite/blob/master/DOC/logo-text.png?raw=true" alt="rqlite"></p><h2 id="Structure-Of-This-Post"><a href="#Structure-Of-This-Post" class="headerlink" title="Structure Of This Post:"></a>Structure Of This Post:</h2><ul><li>Purpose.</li><li>Explanation of terms.</li><li>Dive into source code.</li></ul><h2 id="WHY-We-Want-to-Study-This"><a href="#WHY-We-Want-to-Study-This" class="headerlink" title="WHY We Want to Study This?"></a>WHY We Want to Study This?</h2><p>Distributed computing is a hot topic of computer science. Studying any implementation of real projects is a good start. We can learn how to organize a project and how to integrate different libraries, packages, and algorithms into one project.</p><a id="more"></a><h2 id="WHAT"><a href="#WHAT" class="headerlink" title="WHAT"></a>WHAT</h2><p>Before we start to dive into the source code of <a href="https://github.com/rqlite/rqlite" target="_blank" rel="noopener">rqlite</a>, we need to understand basic concepts of this project.</p><h3 id="Distributed-Computing"><a href="#Distributed-Computing" class="headerlink" title="Distributed Computing"></a>Distributed Computing</h3><ul><li>Description:<blockquote><p><strong><em>Distributed Computing</em></strong> is a field of computer science that studies distributed systems.</p><p>In distributed computing, a problem is divided into many tasks, each of which is solved by one or more computers,[3] which communicate with each other by message passing.</p><p>Three significant characteristics of distributed systems are: concurrency of components, lack of a global clock, and independent failure of components. Examples of distributed systems vary from SOA-based systems to massively multiplayer online games to peer-to-peer applications.</p><footer><strong>Wikipedia --</strong><cite><a href="https://en.wikipedia.org/wiki/Distributed_computing" target="_blank" rel="noopener">Distributed Computing</a></cite></footer></blockquote></li></ul><h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><ul><li><p><a href="https://raft.github.io/" target="_blank" rel="noopener">Home page</a></p></li><li><p>Description:</p><blockquote><p><strong><em>Raft</em></strong> is a consensus algorithm designed as an alternative to <a href="http://bit.ly/2cHR8M8" target="_blank" rel="noopener">Paxos</a>. It was meant to be more understandable than Paxos by means of separation of logic, but it is also formally proven safe and offers some new features.</p><p>Raft offers a generic way to distribute a state machine across a cluster of computing systems, ensuring that each node in the cluster agrees upon the same series of state transitions</p><footer><strong>Wikipedia --</strong><cite><a href="https://en.wikipedia.org/wiki/Raft_(computer_science)" target="_blank" rel="noopener">Raft</a></cite></footer></blockquote><blockquote><p><strong><em>Raft</em></strong> is a distributed consensus protocol.</p><p>Such protocol are used to ensure multiple different nodes-server-always agree on a given set of values.</p><footer><strong>Philip O'Toole --</strong><cite><a href="http://www.slideshare.net/PhilipOToole/rqlite-replicating-sqlite-via-raft-consensu" target="_blank" rel="noopener">Raft</a></cite></footer></blockquote></li></ul><h3 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h3><ul><li><p><a href="https://www.sqlite.org/" target="_blank" rel="noopener">Home page</a></p></li><li><p>Description:</p><blockquote><p><strong><em>SQLite</em></strong> is a relational database management system contained in a C programming library. In contrast to many other database management systems, SQLite is not a client–server database engine. Rather, it is embedded into the end program.</p><p>SQLite is ACID-compliant and implements most of the SQL standard, using a dynamically and weakly typed SQL syntax that does not guarantee the domain integrity.[5]</p><p>SQLite is a popular choice as embedded database software for local/client storage in application software such as web browsers. It is arguably the most widely deployed database engine, as it is used today by several widespread browsers, operating systems, and embedded systems (such as mobile phones), among others.[6] SQLite has bindings to many programming languages.</p><footer><strong>Wikipedia --</strong><cite><a href="https://en.wikipedia.org/wiki/SQLite" target="_blank" rel="noopener">SQLite</a></cite></footer></blockquote></li></ul><h2 id="HOW-The-architecture-of-RQLite"><a href="#HOW-The-architecture-of-RQLite" class="headerlink" title="HOW (The architecture of RQLite)"></a>HOW (The architecture of RQLite)</h2><p>What’s the architecture of this project?</p><p>—Diagram comes from the documentation of rqlite—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐    ┌ ─ ─ ─ ─ ┐</span><br><span class="line">            Clients                   Other</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘    │  Nodes  │</span><br><span class="line">               │                    ─ ─ ─ ─ ─</span><br><span class="line">               │                        ▲</span><br><span class="line">               │                        │</span><br><span class="line">               │                        │</span><br><span class="line">               ▼                        ▼</span><br><span class="line">┌─────────────────────────────┐ ┌───────────────┐</span><br><span class="line">│           HTTP(S)           │ │      TCP      │</span><br><span class="line">└─────────────────────────────┘ └───────────────┘</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│             Raft (hashicorp/raft)             │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│               matt-n/go-sqlite3               │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│                   sqlite3.c                   │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">│                 RAM or disk                   │</span><br><span class="line">└───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>—The structure of code of RQLite.—</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">├── auth</span><br><span class="line">│   ├── credential_store.go</span><br><span class="line">│   └── credential_store_test.go</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── circle.yml</span><br><span class="line">├── cluster</span><br><span class="line">│   ├── service.go</span><br><span class="line">│   └── service_test.go</span><br><span class="line">├── cmd</span><br><span class="line">│   ├── rqlite</span><br><span class="line">│   │   ├── execute.go</span><br><span class="line">│   │   ├── main.go</span><br><span class="line">│   │   ├── query.go</span><br><span class="line">│   │   └── README.md</span><br><span class="line">│   └── rqlited</span><br><span class="line">│       └── main.go</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── db</span><br><span class="line">│   ├── db.go</span><br><span class="line">│   └── db_test.go</span><br><span class="line">├── doc</span><br><span class="line">│   ├── BACKUPS.md</span><br><span class="line">│   ├── CLI.md</span><br><span class="line">│   ├── CLUSTER_MGMT.md</span><br><span class="line">│   ├── CONSISTENCY.md</span><br><span class="line">│   ├── DESIGN.md</span><br><span class="line">│   ├── DIAGNOSTICS.md</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   └── SECURITY.md</span><br><span class="line">├── doc.go</span><br><span class="line">├── gen_artifacts.sh</span><br><span class="line">├── gofmt.sh</span><br><span class="line">├── http</span><br><span class="line">│   ├── service.go</span><br><span class="line">│   └── service_test.go</span><br><span class="line">├── LICENSE</span><br><span class="line">├── package.sh</span><br><span class="line">├── README.md</span><br><span class="line">├── store</span><br><span class="line">│   ├── store.go</span><br><span class="line">│   └── store_test.go</span><br><span class="line">├── system_test</span><br><span class="line">│   ├── cluster_test.go</span><br><span class="line">│   ├── helpers.go</span><br><span class="line">│   └── single_node_test.go</span><br><span class="line">├── tcp</span><br><span class="line">│   ├── doc.go</span><br><span class="line">│   ├── mux.go</span><br><span class="line">│   └── mux_test.go</span><br><span class="line">├── Vagrantfile</span><br><span class="line">└── vagrant_setup.sh</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>The above texts are the basic information of RQLite. Next post, we will focus on <a href="https://github.com/hashicorp/raft" target="_blank" rel="noopener">hashicorp/raft</a>. Understand how to use the library and how to integrate with SQLite.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ul><li><a href="http://www.slideshare.net/PhilipOToole/rqlite-replicating-sqlite-via-raft-consensu" target="_blank" rel="noopener">rqlite Replicating SQLite via Raft Consensu</a></li><li><a href="https://sqlite.org/whentouse.html" target="_blank" rel="noopener">SQLite use case</a></li></ul><p>@credit image from <a href="https://github.com/rqlite/rqlite" target="_blank" rel="noopener">rqlite</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/rqlite/rqlite/blob/master/DOC/logo-text.png?raw=true&quot; alt=&quot;rqlite&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Structure-Of-This-Post&quot;&gt;&lt;a href=&quot;#Structure-Of-This-Post&quot; class=&quot;headerlink&quot; title=&quot;Structure Of This Post:&quot;&gt;&lt;/a&gt;Structure Of This Post:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Purpose.&lt;/li&gt;
&lt;li&gt;Explanation of terms.&lt;/li&gt;
&lt;li&gt;Dive into source code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WHY-We-Want-to-Study-This&quot;&gt;&lt;a href=&quot;#WHY-We-Want-to-Study-This&quot; class=&quot;headerlink&quot; title=&quot;WHY We Want to Study This?&quot;&gt;&lt;/a&gt;WHY We Want to Study This?&lt;/h2&gt;&lt;p&gt;Distributed computing is a hot topic of computer science. Studying any implementation of real projects is a good start. We can learn how to organize a project and how to integrate different libraries, packages, and algorithms into one project.&lt;/p&gt;
    
    </summary>
    
    
      <category term="raft" scheme="http://swhsiang.github.io/tags/raft/"/>
    
      <category term="distributed_computing" scheme="http://swhsiang.github.io/tags/distributed-computing/"/>
    
  </entry>
  
</feed>
